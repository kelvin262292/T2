#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Website Checker - T·ª± ƒë·ªông ki·ªÉm tra t·∫•t c·∫£ c√°c trang Web v√† Admin
T·∫°o b√°o c√°o chi ti·∫øt v·ªÅ t√¨nh tr·∫°ng ho·∫°t ƒë·ªông c·ªßa t·ª´ng trang
"""

import requests
import time
import json
import os
from datetime import datetime
from urllib.parse import urljoin
from typing import Dict, List, Tuple
import sys

class WebsiteChecker:
    def __init__(self):
        self.client_base_url = "http://localhost:3001"
        self.admin_base_url = "http://localhost:3002"
        self.backend_base_url = "http://localhost:3003"
        self.report_dir = r"c:\Users\AB\Documents\New folder\.g\kiem tra"
        self.results = []
        
        # Danh s√°ch c√°c route c·∫ßn ki·ªÉm tra cho Client
        self.client_routes = [
            "/",                           # Trang ch·ªß
            "/products",                   # Danh s√°ch s·∫£n ph·∫©m
            "/products/1",                 # Chi ti·∫øt s·∫£n ph·∫©m (gi·∫£ ƒë·ªãnh ID=1)
            "/cart",                       # Gi·ªè h√†ng
            "/checkout",                   # Thanh to√°n
            "/checkout/success",           # Th√†nh c√¥ng
            "/search",                     # T√¨m ki·∫øm
            "/categories",                 # Danh m·ª•c
            "/about",                      # Gi·ªõi thi·ªáu
            "/contact",                    # Li√™n h·ªá
            "/auth/signin",                # ƒêƒÉng nh·∫≠p
            "/auth/signup",                # ƒêƒÉng k√Ω
            "/auth/forgot-password",       # Qu√™n m·∫≠t kh·∫©u
            "/account",                    # T√†i kho·∫£n
            "/nonexistent-page"            # Trang 404 test
        ]
        
        # Danh s√°ch c√°c route c·∫ßn ki·ªÉm tra cho Admin
        self.admin_routes = [
            "/",                           # Dashboard
            "/settings"                    # C√†i ƒë·∫∑t
        ]
        
        # T·∫°o th∆∞ m·ª•c b√°o c√°o n·∫øu ch∆∞a c√≥
        os.makedirs(self.report_dir, exist_ok=True)
    
    def check_server_status(self, url: str) -> bool:
        """Ki·ªÉm tra xem server c√≥ ƒëang ch·∫°y kh√¥ng"""
        try:
            response = requests.get(url, timeout=5)
            return True
        except requests.exceptions.RequestException:
            return False
    
    def check_page(self, base_url: str, route: str, page_type: str) -> Dict:
        """Ki·ªÉm tra m·ªôt trang c·ª• th·ªÉ"""
        full_url = urljoin(base_url, route)
        result = {
            "url": full_url,
            "route": route,
            "page_type": page_type,
            "timestamp": datetime.now().isoformat(),
            "status": "unknown",
            "status_code": None,
            "response_time": None,
            "error": None,
            "content_length": None,
            "content_type": None
        }
        
        try:
            start_time = time.time()
            response = requests.get(full_url, timeout=10)
            end_time = time.time()
            
            result["status_code"] = response.status_code
            result["response_time"] = round((end_time - start_time) * 1000, 2)  # ms
            result["content_length"] = len(response.content)
            result["content_type"] = response.headers.get('content-type', 'unknown')
            
            if response.status_code == 200:
                result["status"] = "success"
            elif response.status_code == 404:
                result["status"] = "not_found"
            elif response.status_code >= 500:
                result["status"] = "server_error"
            elif response.status_code >= 400:
                result["status"] = "client_error"
            else:
                result["status"] = "other"
                
        except requests.exceptions.Timeout:
            result["status"] = "timeout"
            result["error"] = "Request timeout after 10 seconds"
        except requests.exceptions.ConnectionError:
            result["status"] = "connection_error"
            result["error"] = "Cannot connect to server"
        except requests.exceptions.RequestException as e:
            result["status"] = "error"
            result["error"] = str(e)
        
        return result
    
    def check_all_pages(self):
        """Ki·ªÉm tra t·∫•t c·∫£ c√°c trang"""
        print("üöÄ B·∫Øt ƒë·∫ßu ki·ªÉm tra website...")
        print("=" * 50)
        
        # Ki·ªÉm tra server tr∆∞·ªõc
        print("üì° Ki·ªÉm tra tr·∫°ng th√°i server...")
        client_online = self.check_server_status(self.client_base_url)
        admin_online = self.check_server_status(self.admin_base_url)
        backend_online = self.check_server_status(self.backend_base_url)
        
        print(f"   Client (3001): {'‚úÖ Online' if client_online else '‚ùå Offline'}")
        print(f"   Admin (3002):  {'‚úÖ Online' if admin_online else '‚ùå Offline'}")
        print(f"   Backend (3003): {'‚úÖ Online' if backend_online else '‚ùå Offline'}")
        print()
        
        # Ki·ªÉm tra Client pages
        if client_online:
            print("üåê Ki·ªÉm tra Client Web Application...")
            for i, route in enumerate(self.client_routes, 1):
                print(f"   [{i:2d}/{len(self.client_routes)}] Checking {route}...", end=" ")
                result = self.check_page(self.client_base_url, route, "client")
                self.results.append(result)
                
                # In k·∫øt qu·∫£ ngay l·∫≠p t·ª©c
                status_icon = {
                    "success": "‚úÖ",
                    "not_found": "üîç",
                    "server_error": "‚ùå",
                    "client_error": "‚ö†Ô∏è",
                    "timeout": "‚è∞",
                    "connection_error": "üîå",
                    "error": "üí•",
                    "other": "‚ùì"
                }.get(result["status"], "‚ùì")
                
                print(f"{status_icon} {result['status_code'] or 'N/A'} ({result['response_time'] or 'N/A'}ms)")
                time.sleep(0.5)  # Tr√°nh spam server
        else:
            print("‚ùå Client server offline - b·ªè qua ki·ªÉm tra")
        
        print()
        
        # Ki·ªÉm tra Admin pages
        if admin_online:
            print("üîß Ki·ªÉm tra Admin Dashboard...")
            for i, route in enumerate(self.admin_routes, 1):
                print(f"   [{i:2d}/{len(self.admin_routes)}] Checking {route}...", end=" ")
                result = self.check_page(self.admin_base_url, route, "admin")
                self.results.append(result)
                
                # In k·∫øt qu·∫£ ngay l·∫≠p t·ª©c
                status_icon = {
                    "success": "‚úÖ",
                    "not_found": "üîç",
                    "server_error": "‚ùå",
                    "client_error": "‚ö†Ô∏è",
                    "timeout": "‚è∞",
                    "connection_error": "üîå",
                    "error": "üí•",
                    "other": "‚ùì"
                }.get(result["status"], "‚ùì")
                
                print(f"{status_icon} {result['status_code'] or 'N/A'} ({result['response_time'] or 'N/A'}ms)")
                time.sleep(0.5)  # Tr√°nh spam server
        else:
            print("‚ùå Admin server offline - b·ªè qua ki·ªÉm tra")
        
        print()
        print("‚úÖ Ho√†n th√†nh ki·ªÉm tra!")
    
    def generate_report(self):
        """T·∫°o b√°o c√°o chi ti·∫øt"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # B√°o c√°o JSON chi ti·∫øt
        json_report_path = os.path.join(self.report_dir, f"website_check_report_{timestamp}.json")
        with open(json_report_path, 'w', encoding='utf-8') as f:
            json.dump({
                "timestamp": datetime.now().isoformat(),
                "summary": self.get_summary(),
                "results": self.results
            }, f, ensure_ascii=False, indent=2)
        
        # B√°o c√°o HTML d·ªÖ ƒë·ªçc
        html_report_path = os.path.join(self.report_dir, f"website_check_report_{timestamp}.html")
        self.generate_html_report(html_report_path)
        
        # B√°o c√°o text ƒë∆°n gi·∫£n
        txt_report_path = os.path.join(self.report_dir, f"website_check_report_{timestamp}.txt")
        self.generate_text_report(txt_report_path)
        
        print(f"üìä B√°o c√°o ƒë√£ ƒë∆∞·ª£c t·∫°o:")
        print(f"   JSON: {json_report_path}")
        print(f"   HTML: {html_report_path}")
        print(f"   TEXT: {txt_report_path}")
    
    def get_summary(self) -> Dict:
        """T·∫°o t√≥m t·∫Øt k·∫øt qu·∫£"""
        total = len(self.results)
        success = len([r for r in self.results if r["status"] == "success"])
        errors = len([r for r in self.results if r["status"] in ["server_error", "error", "timeout", "connection_error"]])
        not_found = len([r for r in self.results if r["status"] == "not_found"])
        
        client_results = [r for r in self.results if r["page_type"] == "client"]
        admin_results = [r for r in self.results if r["page_type"] == "admin"]
        
        return {
            "total_pages": total,
            "successful_pages": success,
            "error_pages": errors,
            "not_found_pages": not_found,
            "success_rate": round((success / total * 100) if total > 0 else 0, 2),
            "client_pages": len(client_results),
            "admin_pages": len(admin_results),
            "avg_response_time": round(sum([r["response_time"] for r in self.results if r["response_time"]]) / len([r for r in self.results if r["response_time"]]) if any(r["response_time"] for r in self.results) else 0, 2)
        }
    
    def generate_html_report(self, file_path: str):
        """T·∫°o b√°o c√°o HTML"""
        summary = self.get_summary()
        
        html_content = f"""
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>B√°o c√°o ki·ªÉm tra Website - {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }}
        .container {{ max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
        h1 {{ color: #333; text-align: center; border-bottom: 3px solid #007bff; padding-bottom: 10px; }}
        .summary {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 20px 0; }}
        .summary-card {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 8px; text-align: center; }}
        .summary-card h3 {{ margin: 0 0 10px 0; font-size: 14px; opacity: 0.9; }}
        .summary-card .value {{ font-size: 24px; font-weight: bold; }}
        table {{ width: 100%; border-collapse: collapse; margin-top: 20px; }}
        th, td {{ padding: 12px; text-align: left; border-bottom: 1px solid #ddd; }}
        th {{ background-color: #f8f9fa; font-weight: bold; }}
        .status-success {{ color: #28a745; font-weight: bold; }}
        .status-error {{ color: #dc3545; font-weight: bold; }}
        .status-warning {{ color: #ffc107; font-weight: bold; }}
        .status-info {{ color: #17a2b8; font-weight: bold; }}
        .page-type-client {{ background-color: #e3f2fd; }}
        .page-type-admin {{ background-color: #fff3e0; }}
        .response-time {{ font-family: monospace; }}
    </style>
</head>
<body>
    <div class="container">
        <h1>üîç B√°o c√°o ki·ªÉm tra Website</h1>
        <p style="text-align: center; color: #666; margin-bottom: 30px;">
            Th·ªùi gian ki·ªÉm tra: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
        </p>
        
        <div class="summary">
            <div class="summary-card">
                <h3>T·ªïng s·ªë trang</h3>
                <div class="value">{summary['total_pages']}</div>
            </div>
            <div class="summary-card">
                <h3>Th√†nh c√¥ng</h3>
                <div class="value">{summary['successful_pages']}</div>
            </div>
            <div class="summary-card">
                <h3>L·ªói</h3>
                <div class="value">{summary['error_pages']}</div>
            </div>
            <div class="summary-card">
                <h3>T·ª∑ l·ªá th√†nh c√¥ng</h3>
                <div class="value">{summary['success_rate']}%</div>
            </div>
            <div class="summary-card">
                <h3>Th·ªùi gian ph·∫£n h·ªìi TB</h3>
                <div class="value">{summary['avg_response_time']}ms</div>
            </div>
        </div>
        
        <table>
            <thead>
                <tr>
                    <th>Lo·∫°i</th>
                    <th>URL</th>
                    <th>Tr·∫°ng th√°i</th>
                    <th>M√£ HTTP</th>
                    <th>Th·ªùi gian (ms)</th>
                    <th>K√≠ch th∆∞·ªõc</th>
                    <th>L·ªói</th>
                </tr>
            </thead>
            <tbody>
"""
        
        for result in self.results:
            status_class = {
                "success": "status-success",
                "not_found": "status-info",
                "server_error": "status-error",
                "client_error": "status-warning",
                "timeout": "status-error",
                "connection_error": "status-error",
                "error": "status-error"
            }.get(result["status"], "")
            
            page_type_class = f"page-type-{result['page_type']}"
            
            html_content += f"""
                <tr class="{page_type_class}">
                    <td>{result['page_type'].upper()}</td>
                    <td><a href="{result['url']}" target="_blank">{result['route']}</a></td>
                    <td class="{status_class}">{result['status'].replace('_', ' ').title()}</td>
                    <td>{result['status_code'] or 'N/A'}</td>
                    <td class="response-time">{result['response_time'] or 'N/A'}</td>
                    <td>{result['content_length'] or 'N/A'} bytes</td>
                    <td>{result['error'] or ''}</td>
                </tr>
            """
        
        html_content += """
            </tbody>
        </table>
        
        <div style="margin-top: 30px; padding: 20px; background-color: #f8f9fa; border-radius: 8px;">
            <h3>üìù Ghi ch√∫:</h3>
            <ul>
                <li><strong>Client:</strong> ·ª®ng d·ª•ng web ch√≠nh (localhost:3001)</li>
                <li><strong>Admin:</strong> Dashboard qu·∫£n tr·ªã (localhost:3002)</li>
                <li><strong>Success:</strong> Trang t·∫£i th√†nh c√¥ng (HTTP 200)</li>
                <li><strong>Not Found:</strong> Trang kh√¥ng t·ªìn t·∫°i (HTTP 404)</li>
                <li><strong>Error:</strong> L·ªói server ho·∫∑c k·∫øt n·ªëi</li>
            </ul>
        </div>
    </div>
</body>
</html>
        """
        
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(html_content)
    
    def generate_text_report(self, file_path: str):
        """T·∫°o b√°o c√°o text ƒë∆°n gi·∫£n"""
        summary = self.get_summary()
        
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write("=" * 60 + "\n")
            f.write("           B√ÅO C√ÅO KI·ªÇM TRA WEBSITE\n")
            f.write("=" * 60 + "\n")
            f.write(f"Th·ªùi gian: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n\n")
            
            f.write("T·ªîNG QUAN:\n")
            f.write("-" * 30 + "\n")
            f.write(f"T·ªïng s·ªë trang ki·ªÉm tra: {summary['total_pages']}\n")
            f.write(f"Th√†nh c√¥ng: {summary['successful_pages']}\n")
            f.write(f"L·ªói: {summary['error_pages']}\n")
            f.write(f"Kh√¥ng t√¨m th·∫•y: {summary['not_found_pages']}\n")
            f.write(f"T·ª∑ l·ªá th√†nh c√¥ng: {summary['success_rate']}%\n")
            f.write(f"Th·ªùi gian ph·∫£n h·ªìi trung b√¨nh: {summary['avg_response_time']}ms\n\n")
            
            f.write("CHI TI·∫æT T·ª™NG TRANG:\n")
            f.write("-" * 30 + "\n")
            
            for result in self.results:
                f.write(f"\n[{result['page_type'].upper()}] {result['route']}\n")
                f.write(f"  URL: {result['url']}\n")
                f.write(f"  Tr·∫°ng th√°i: {result['status']}\n")
                f.write(f"  M√£ HTTP: {result['status_code'] or 'N/A'}\n")
                f.write(f"  Th·ªùi gian: {result['response_time'] or 'N/A'}ms\n")
                if result['error']:
                    f.write(f"  L·ªói: {result['error']}\n")
    
    def print_summary(self):
        """In t√≥m t·∫Øt k·∫øt qu·∫£ ra console"""
        summary = self.get_summary()
        
        print("\n" + "=" * 50)
        print("üìä T√ìM T·∫ÆT K·∫æT QU·∫¢")
        print("=" * 50)
        print(f"üìÑ T·ªïng s·ªë trang: {summary['total_pages']}")
        print(f"‚úÖ Th√†nh c√¥ng: {summary['successful_pages']}")
        print(f"‚ùå L·ªói: {summary['error_pages']}")
        print(f"üîç Kh√¥ng t√¨m th·∫•y: {summary['not_found_pages']}")
        print(f"üìà T·ª∑ l·ªá th√†nh c√¥ng: {summary['success_rate']}%")
        print(f"‚è±Ô∏è  Th·ªùi gian ph·∫£n h·ªìi TB: {summary['avg_response_time']}ms")
        
        # Hi·ªÉn th·ªã c√°c trang c√≥ l·ªói
        error_pages = [r for r in self.results if r["status"] in ["server_error", "error", "timeout", "connection_error"]]
        if error_pages:
            print("\nüö® C√ÅC TRANG C√ì L·ªñI:")
            for page in error_pages:
                print(f"   ‚ùå {page['route']} - {page['status']} ({page['error'] or 'Unknown error'})")
        
        print("=" * 50)

def main():
    """H√†m ch√≠nh"""
    print("üîç Website Checker - Ki·ªÉm tra t·ª± ƒë·ªông t·∫•t c·∫£ c√°c trang")
    print("T√°c gi·∫£: AI Assistant")
    print("Th·ªùi gian:", datetime.now().strftime('%d/%m/%Y %H:%M:%S'))
    print()
    
    checker = WebsiteChecker()
    
    try:
        # Ki·ªÉm tra t·∫•t c·∫£ c√°c trang
        checker.check_all_pages()
        
        # In t√≥m t·∫Øt
        checker.print_summary()
        
        # T·∫°o b√°o c√°o
        checker.generate_report()
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è ƒê√£ d·ª´ng ki·ªÉm tra theo y√™u c·∫ßu ng∆∞·ªùi d√πng")
    except Exception as e:
        print(f"\nüí• L·ªói kh√¥ng mong mu·ªën: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()